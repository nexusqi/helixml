name: CI

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [stable, beta, nightly]
        include:
          - rust: stable
            cache-key: stable
          - rust: beta
            cache-key: beta
          - rust: nightly
            cache-key: nightly

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ matrix.cache-key }}

    - name: Cache cargo index
      uses: actions/cache@v3
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ matrix.cache-key }}

    - name: Cache cargo build
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ matrix.cache-key }}-${{ hashFiles('**/Cargo.lock') }}

    - name: Install cargo-audit
      run: cargo install cargo-audit --locked

    - name: Install cargo-deny
      run: cargo install cargo-deny --locked

    - name: Install cargo-tarpaulin
      if: matrix.rust == 'stable'
      run: cargo install cargo-tarpaulin --locked

    - name: Check formatting
      if: matrix.rust == 'stable'
      run: cargo fmt --all -- --check

    - name: Run clippy
      if: matrix.rust == 'stable'
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Run cargo audit
      run: cargo audit

    - name: Run cargo deny check
      run: cargo deny check

    - name: Build workspace
      run: cargo build --workspace --all-features

    - name: Run tests
      run: cargo test --workspace --all-features

    - name: Run integration tests
      run: cargo test --workspace --test '*'

    - name: Generate coverage report
      if: matrix.rust == 'stable'
      run: cargo tarpaulin --out Html --output-dir coverage

    - name: Upload coverage to Codecov
      if: matrix.rust == 'stable'
      uses: codecov/codecov-action@v5
      with:
        file: ./coverage/tarpaulin-report.html
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache cargo build
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-lint-${{ hashFiles('**/Cargo.lock') }}

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Check documentation
      run: cargo doc --workspace --all-features --no-deps

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-audit
      run: cargo install cargo-audit --locked

    - name: Install cargo-deny
      run: cargo install cargo-deny --locked

    - name: Run cargo audit
      run: cargo audit

    - name: Run cargo deny check
      run: cargo deny check

    - name: Check for known security issues
      run: cargo audit --deny warnings

  examples:
    name: Examples
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo build
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-examples-${{ hashFiles('**/Cargo.lock') }}

    - name: Build examples
      run: cargo build --examples --workspace

    - name: Run simple example
      run: cargo run --example simple_example

    - name: Run SSM example
      run: cargo run --example ssm_example

    - name: Run Hyena example
      run: cargo run --example hyena_example

    - name: Run meaning induction demo
      run: cargo run -p ssm_byte_lm demo

  benchmarks:
    name: Benchmarks
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install criterion
      run: cargo install cargo-criterion

    - name: Cache cargo build
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-benchmarks-${{ hashFiles('**/Cargo.lock') }}

    - name: Run benchmarks
      run: cargo bench --workspace
      continue-on-error: true

    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: target/criterion/
      if: always()

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo build
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-docs-${{ hashFiles('**/Cargo.lock') }}

    - name: Build documentation
      run: cargo doc --workspace --all-features --no-deps

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      if: github.ref == 'refs/heads/master'
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./target/doc